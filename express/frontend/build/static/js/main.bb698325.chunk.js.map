{"version":3,"sources":["js/reducers.js","js/constants.js","js/store.js","components/Header.js","components/Card.js","components/PageOne.js","components/PageTwo.js","components/DataView.js","components/PageThree.js","js/actions.js","components/DynamicPage.js","components/Body.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","windowWidth","window","innerWidth","windowHeight","innerHeight","data","rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","width","height","concat","toConsumableArray","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","items","title","link","Header","props","react_default","a","createElement","className","map","elem","index","key","react_router_dom","to","Card","cards","PageOne","components_Card","PageTwo","DataViewRedux","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Component","DataView","connect","PageThree","onClick","dispatch","components_DataView","DynamicPage","_ref","params","match","text","withRouter","react_router","path","component","Footer","href","App","components_Header","components_Body","components_Footer","Boolean","location","hostname","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb698325.chunk.js","sourcesContent":["import {\n  WINDOW_RESIZE, \n  PUSH_DATA\n} from './constants'\n\nconst initialState = {\n  windowWidth:  window.innerWidth,\n  windowHeight:  window.innerHeight,\n  data: []\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case WINDOW_RESIZE:\n      return { ...state, windowWidth: action.payload.width, windowHeight: action.payload.height }\n\n    case PUSH_DATA:\n      return {...state, data: [...state.data, action.payload] }\n      \n    default:\n      return state;\n    }\n  }\n  \n  export default rootReducer\n  ","export const WINDOW_RESIZE = \"WINDOW_RESIZE\"\nexport const PUSH_DATA = \"PUSH_DATA\"","// src/js/store.js\n\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport default store;","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport '../css/Header.scss'\n\nconst items = [{\n  title: 'pageone',\n  link: '/pageone'\n}, \n{\n  title: 'pagetwo',\n  link: '/pagetwo'\n},\n{\n  title: 'pagethree',\n  link: '/pagethree'\n}, \n{\n  title: 'pagefour',\n  link: '/pagefour'\n}]\n\nconst Header = (props) => {\n  return (\n    <div className=\"header-container\">\n\n      <div className=\"logo-container\">Site Logo</div>\n    \n      <ul className=\"links-container\">\n        { items.map((elem, index) => \n          <li key={elem.link + index}> \n            <Link to={ elem.link }> \n              { elem.title }\n            </Link>\n          </li>  \n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default Header","import React from 'react'\n\nconst Card = (props) => {\n  return (\n    <div>\n      <div className=\"card-container\">\n        <div className=\"card-title\">\n          { props.title }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst cards = [{title: 'card a'},{title: 'card b'},{title: 'card c'}]\n\nconst PageOne = (props) => {\n  return (\n    <div>\n      { cards.map((elem, index) => <Card title={elem.title} key={elem.title + index} />) }\n    </div>\n  )\n}\n\nexport default PageOne","import React from 'react'\nimport Card from './Card'\n\nconst cards = [{title: 'card d'}, {title: 'card e'}, {title: 'card f'}]\n\nconst PageTwo = (props) => {\n  return (\n    <div>\n      { cards.map((elem, index) => <Card title={elem.title} key={elem.title + index} />) }\n    </div>\n  )\n}\n\nexport default PageTwo","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = state => {\n  return { data: state.data }\n}\n\n\nclass DataViewRedux extends Component {\n  constructor() {\n    super()\n\n    this.state = {}\n  }\n\n  render () {\n    return (\n      <div>\n        <p>data:{ this.props.data.length }</p>\n      </div>\n    )\n  }\n}\n\n\nconst DataView = connect(mapStateToProps)(DataViewRedux)\n\nexport default DataView","import React from 'react'\nimport DataView from './DataView'\nimport { pushData } from '../js/actions'\nimport store from '../js/store'\n\n\nconst PageThree = () => {\n  return (\n    <div>\n      <button onClick={ () => store.dispatch(pushData('test')) }>add data</button>\n      <DataView />\n    </div>\n  )\n}\n\nexport default PageThree","import { \n  WINDOW_RESIZE,\n  PUSH_DATA\n} from './constants'\n\nexport const windowResize = (field) => (\n  {\n    type: WINDOW_RESIZE,\n    payload: field\n  }\n)\n  \nexport const pushData = (data) => (\n  {\n    type: PUSH_DATA,\n    payload: data\n  }\n)\n","import React from 'react'\n\nconst DynamicPage = ({ match } ) => {\n  const { params } = match\n\n  return (\n    <div>\n      <h1> { params.text } </h1>\n    </div>\n  )\n}\n\nexport default DynamicPage","import React from 'react'\nimport { Route, Switch, withRouter } from 'react-router-dom'\n\nimport PageOne from './PageOne'\nimport PageTwo from './PageTwo'\nimport PageThree from './PageThree'\n\nimport DynamicPage from './DynamicPage'\n\nimport '../css/Body.scss'\n\nconst Body = () => {\n  return (\n    <div className=\"body-container\">\n      <Switch>\n        <Route path='/pageone' component={ PageOne } />\n        <Route path='/pagetwo' component={ PageTwo } />\n        <Route path='/pagethree' component={ PageThree } />\n        <Route path='/dynamicpage/:text' component={ DynamicPage } />\n      </Switch>\n    </div>\n  )\n}\n\nexport default withRouter(Body)","import React from 'react'\n\nimport '../css/Footer.scss' \n\nconst Footer = () => {\n  return (\n    <div className=\"footer-container\">\n      <ul className=\"links-container\">\n        <li><a href=\"/pageone\">Link 1</a></li>\n        <li><a href=\"/pagetwo\">Link 2</a></li>\n        <li><a href=\"/pagethree\">Link 3</a></li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport Header from './components/Header'\nimport Body from './components/Body'\nimport Footer from './components/Footer'\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Body />\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './js/store'\nimport App from './App';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}